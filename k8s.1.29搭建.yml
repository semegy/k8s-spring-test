## 方便集群调用 修改hosts
vim /etc/hosts
192.168.208.103 master
192.168.208.101 worker1
192.168.208.102 worker2
192.168.208.100 worker3

## 同步时间
0 */1 * * * * /usr/sbin/ntpdate timeleap.aliy.com
systemctl start chronyd
systemctl enable chronyd

## 禁用iptables 关闭防火墙
systemctl stop firewalld
systemctl disable firewalld
systemctl stop iptables
systemctl disable iptables

## 禁用selinux
setenforce 0
sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
## 查看selinux状态
getenforce

#禁用swap
swapoff -a
sed -ri 's/.*swap.*/#&/' /etc/fstab

# 添加网桥过滤地址
cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

sysctl -p

#加载网桥过滤地址
modprobe br_netfilter

#查看网桥加载情况
lsmod | grep br_netfilter

#配置ipvs
yum install ipvsadm -y
yum install ipset -y

# ipvs模块脚本
cat <<EOF > /etc/sysconfig/modules/ipvs.modules
#!/bin/bash
modprobe -- ip_vs
modprobe -- ip_vs_rr
modprobe -- ip_vs_wrr
modprobe -- ip_vs_sh
modprobe -- nf_conntrack_ipv4
EOF

# 加载ipvs模块
chmod 755 /etc/sysconfig/modules/ipvs.modules
/bin/bash /etc/sysconfig/modules/ipvs.modules
# 查看ipvs模块加载情况
lsmod | grep -i ip_vs

#docker-ce yum源
wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
#docker 支持版本
yum list docker-ce --showduplicates | sort -r
# 安装docker
yum install docker-ce -y
#修改docker配置文件
sudo mkdir -p /etc/docker
sudo cat <<-'EOF'
{
"exec-opts": [ "native.cgroupdriver=systemd" ],
"registry-mirrors": [ "https://9i8eqss1.mirror.aliyuncs.com" ]
}
EOF

# cri-dockered yum源
wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.8/cri-dockerd-0.3.8-3.el7.x86_64.rpm
yum install cri-dockerd-0.3.8-3.el7.x86_64.rpm -y
# 修改配置文件
vim /usr/lib/systemd/system/cri-docker.service
ExecStart=/usr/bin/cri-dockerd --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.9 --container-runtime-endpoint fd://
ExecStart=/usr/bin/cri-dockerd --pod-infra-container-image=registry.k8s.io/pause:3.9 --container-runtime-endpoint fd://
# 启动docker相关服务
sudo systemctl daemon-reload
sudo systemctl restart docker
sudo systemctl enable docker
systmctl start cri-docker

# k8s 1.29 yum源
# 阿里源
cat > /etc/yum.repos.d/k8s.repo <<EOF
[ kubernetes ]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.29/rpm/
enabled=1
gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.29/rpm/repodata/repomd.xml.key
EOF

# 谷歌源
cat > /etc/yum.repos.d/k8s.repo <<EOF
[ kubernetes ]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
EOF

## 查看centos的kubeadm版本
yum list kubeadm --showduplicates | sort -r

#安装 kubeadm kubelet kubectl 也可安装指定版本
yum install kubeadm kubelet kubectl -y
yum install kubeadm-1.29.4-0 kubelet-1.29.4-0 kubectl-1.29.4-0 -y

# 修改配置文件
vim /etc/sysconfig/kubelet
KUBELET_EXTRA_ARGS="--cgroup-driver=systemd"
# 开机自启
systemctl enable kubelet

# 查看岸安装镜像
yum list | grep kube

# 查看、拉取k8s组件
kubeadm config images list

# 谷歌方式，由于外网限制，拉取镜像失败，所以使用谷歌源的拉去方式不常用
kubeadm config images pull --cri-socket unix:///var/run/cri-dockerd.sock
# 拉取kubernetes组件镜像
# 国内方式
images=(
kube-apiserver:v1.29.4
kube-controller-manager:v1.29.4
kube-scheduler:v1.29.4
kube-proxy:v1.29.4
coredns:v1.11.1
pause:3.9
etcd:3.5.12-0
)
for imageName in "${images[@]}"
do
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName
docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName
done

# 低版本使用方式 用阿里源替换谷歌源，就是改下名字，删除阿里源镜像
#docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName
#docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName

# 初始化master节点 
# image-repository：初始化指定镜像仓库，不然会报不同源错误
# apiserver-advertise-address指定本机IP
# kubernetes-version：k8s版本
# cri-socket：指定dockerd.sock
# CPU*2 memory 2G
kubeadm init \
--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \
--cri-socket unix:///var/run/cri-dockerd.sock \
--apiserver-advertise-address 192.168.208.103  \
--kubernetes-version v1.29.4 \
--pod-network-cidr 10.244.0.0/16 

# work节点加入集群 
kubeadm join 192.168.208.103:6443 --token 3fd26i.tjzpgbfe5o35fn58 \
--discovery-token-ca-cert-hash sha256:59bc606085c7643fc481bdc59687bc149863cbbbeb51176bfc92b33fcb4effa2 --cri-socket unix:///var/run/cri-dockerd.sock 

#k8s重启
kubeadm reset --cri-socket unix:///var/run/cri-dockerd.sock
# 获取集群节点
kubectl get nodes

# 拷贝集群配置
mkdir $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
# 修改权限
sudo chown $(id -u):$(id -g) $HOME/.kube/config
# 暴露kubeconfig 
export KUBECONFIG=/etc/kubernetes/admin.conf

# 如果是添加 worker 节点，直接使用token join集群。
# 如果找不到可重新生成 token，使用kubeadm token list查看，然后使用kubeadm token generate
kubeadm join 192.168.208.103:6443 --token 3fd26i.tjzpgbfe5o35fn58 \
--discovery-token-ca-cert-hash sha256:59bc606085c7643fc481bdc59687bc149863cbbbeb51176bfc92b33fcb4effa2 --cri-socket unix:///var/run/cri-dockerd.sock


#calico 集群网络插件部署
# Install Calico link:https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart

# Install the Tigera Calico operator and custom resource definitions. 安装 Tigera Calico 运算符和自定义资源定义。
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.4/manifests/tigera-operator.yaml
# 添加host白名单，否则拒绝访问，配置一个即可
185.199.110.133 raw.githubusercontent.com
185.199.111.133 raw.githubusercontent.com
185.199.108.133 raw.githubusercontent.com
185.199.109.133 raw.githubusercontent.com
# Install Calico by creating the necessary custom resource. For more information on configuration options available in this manifest, see the installation reference.
#  通过创建必要的自定义资源来安装 Calico。有关此清单中可用的配置选项的详细信息，请参阅安装参考。
wget https://docs.projectcalico.org/projectcalico/calico/v3.26.4/manifests
vi custom-resources.yaml
cidr: 10.244.0.0/16
kubectl apply -f custom-resources.yaml

# 查看kubelet日志
journalctl -f -u kubelet.service

# 查看集群pods状态
kubectl get pods --all-namespaces
kubectl get nodes
# 查看单个namespace的pods状态
kubectl get pods -n kube-system
# 查看所有pod更多信息
kubectl get pods -n kube-system -o wide
# 查看所有pod yaml格式
kubectl get pods -n kube-system -o yaml
# 查看单个pod yaml格式
kubectl get pods -n kube-system -o yaml -l k8s-app=kube-dns
# 查看单个pod日志
kubectl logs -n kube-system -l k8s-app=kube-dns
# 查看单个pod yaml格式
kubectl get pods -n kube-system -o yaml -l k8s-app=kube-dns
# 查看指定 worker节点状况
kubectl get pods -n kube-system -o wide -l k8s-app=kube-dns
kubectl get pods -n kube-system -o wide

#移除端口进程

ss -tulnp '( sport = :10250 or dport = :10250 )' | awk '{print $NF}' | cut -d '/' -f 1
kill -9 8080






